package com.hv.jobhunt.serviceImpl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.List;

import javax.xml.bind.ValidationException;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import com.hv.jobhunt.Models.JobListing;
import com.hv.jobhunt.repository.JobRepository;

@ExtendWith(MockitoExtension.class)
class EmployeerServiceImplTest {

	@Mock
    private JobRepository jobRepository;

    @InjectMocks
    private EmployeerServiceImpl employeerServiceImpl;
    
    @Test
    public void testPostJobSuccess() {
        JobListing jobListing = new JobListing();
        jobListing.setJobTitle("Software Engineer");
        jobListing.setJobPositioning("Full-time");
        jobListing.setEmployeeType("Permanent");
        jobListing.setJobDescription("Design, develop, and maintain software systems.");
        jobListing.setKeySkills("Java, Spring, Hibernate, SQL");
        jobListing.setMinimumWorkExperience(2);
        jobListing.setMaximumWorkExperience(5);
        jobListing.setLocation("New York");
        jobListing.setJobMode("On-site");
        jobListing.setEducationalQualification("Bachelor's degree in Computer Science");
        jobListing.setCompanyName("ABC Company");
        jobListing.setMinimumSalary(80000.0);
        jobListing.setMaximumSalary(120000.0);
        jobListing.setPostedBy("John Doe");
        jobListing.setJobApplicationStatus("open");

        when(jobRepository.save(jobListing)).thenReturn(jobListing);

        String result = employeerServiceImpl.postJob(jobListing);

        assertEquals("Job Posted", result);
        verify(jobRepository, times(1)).save(jobListing);
    }
    
    @Test
    public void testPostJobNullObject() {
        assertThrows(NullPointerException.class, () -> employeerServiceImpl.postJob(null));
}
    
    @Test
    public void testPostJobInvalidJobTitle() {
        JobListing jobListing = new JobListing();
        jobListing.setJobTitle(null);
        jobListing.setJobPositioning("Full-time");
        jobListing.setEmployeeType("Permanent");
        jobListing.setJobDescription("Design, develop, and maintain software systems.");
        jobListing.setKeySkills("Java, Spring, Hibernate, SQL");
        jobListing.setMinimumWorkExperience(2);
        jobListing.setMaximumWorkExperience(5);
        jobListing.setLocation("New York");
        jobListing.setJobMode("On-site");
        jobListing.setEducationalQualification("Bachelor's degree in Computer Science");
        jobListing.setCompanyName("ABC Company");
        jobListing.setMinimumSalary(80000.0);
        jobListing.setMaximumSalary(120000.0);
        jobListing.setPostedBy("John Doe");
        jobListing.setJobApplicationStatus("open");

        assertThrows(ValidationException.class, () -> employeerServiceImpl.postJob(jobListing));
    }
    
    @Test
    public void testGetJobs_ByPostedBy() {
        // Create a job listing with a postedBy email
        JobListing jobListing = new JobListing();
        jobListing.setJobTitle("Test Job");
        jobListing.setPostedBy("test@example.com");
        jobRepository.save(jobListing);

        // Call the getjobs method
        List<JobListing> jobListings = employeerServiceImpl.getjobs("test@example.com");

        // Assert that the job listing is returned
        assertNotNull(jobListings);
       assertEquals("Test Job", jobListings.get(0).getJobTitle());
    }
    
    @Test
    public void testGetJobs_NoJobsFound() {
        // Call the getjobs method with an email that doesn't have any job listings
        List<JobListing> jobListings = employeerServiceImpl.getjobs("nonexistent@example.com");

        // Assert that an empty list is returned
        assertNotNull(jobListings);
        assertEquals(0, jobListings.size());
    }
    

}
