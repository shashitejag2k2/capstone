package com.hv.jobhunt.serviceImpl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import com.hv.jobhunt.Models.AppliedJobs;
import com.hv.jobhunt.Models.JobListing;
import com.hv.jobhunt.repository.JobAppliedRepository;
import com.hv.jobhunt.repository.JobRepository;
@ExtendWith(MockitoExtension.class)
class JobSeekerServiceImplTest {
	
	@Mock
	private JobAppliedRepository jobAppliedRepository;
	
	@Mock
	private JobRepository jobRepository;
	
	@InjectMocks
    private JobSeekerServiceImpl jobSeekerServiceImpl;

	@Test
    void testApplyJob_Success() {
        // Test case for successful job application

        // Mock input data
        AppliedJobs jobApplication = new AppliedJobs();
        jobApplication.setAppliedBy("user@example.com");
        jobApplication.setJobId(123);

        // Mock repository behavior
        when(jobAppliedRepository.findByAppliedByAndJobId("user@example.com", 123)).thenReturn(null);

        // Calling the service method
        String result = jobSeekerServiceImpl.applyJob(jobApplication);

        // Assertions
        assertEquals("Job application saved successfully", result);

        // Verify interactions
        verify(jobAppliedRepository, times(1)).save(jobApplication);
    }
	
	@Test
    void testApplyJob_AlreadyApplied() {
        // Test case for when the user has already applied for the job

        // Mock input data
        AppliedJobs jobApplication = new AppliedJobs();
        jobApplication.setAppliedBy("user@example.com");
        jobApplication.setJobId(123);
        jobApplication.setPostedBy("employer@example.com");
        jobApplication.setJobTitle("Software Developer");
        jobApplication.setStatus("pending");

        // Mock repository behavior
        when(jobAppliedRepository.findByAppliedByAndJobId("user@example.com", 123)).thenReturn(jobApplication);

        // Calling the service method
        String result = jobSeekerServiceImpl.applyJob(jobApplication);

        // Assertions
        assertEquals("You have already applied for this job", result);

        // Verify interactions
        verify(jobAppliedRepository, never()).save(any());
    }
	
	 @Test
	    void testApplyJob_Exception() {
	        // Test case for when an unexpected error occurs during job application

	        // Mock input data
	        AppliedJobs jobApplication = new AppliedJobs();
	        jobApplication.setAppliedBy("user@example.com");
	        jobApplication.setJobId(123);
	        jobApplication.setPostedBy("employer@example.com");
	        jobApplication.setJobTitle("Software Developer");
	        jobApplication.setStatus("pending");

	        // Mock repository behavior to simulate an exception
	        when(jobAppliedRepository.findByAppliedByAndJobId("user@example.com", 123)).thenThrow(new RuntimeException("Test exception"));

	        // Calling the service method
	        String result = jobSeekerServiceImpl.applyJob(jobApplication);

	        // Assertions
	        assertEquals("Failed to save job application due to an unexpected error", result);

	        // Verify interactions
	        verify(jobAppliedRepository, never()).save(any());
	    }
	 
	 @Test 
	 public void testGetJobs_ReturnsNonEmptyList() 
	 {
		 
		 JobListing jobListing1 = new JobListing(); 
		 jobListing1.setJobId(1); 
		 jobListing1.setJobTitle("Software Engineer");
		 jobListing1.setEmployeeType("Full-time"); 
		 jobListing1.setLocation("New York"); 
		 jobListing1.setCompanyName("ABC Company"); 
		 jobListing1.setMinimumSalary(80000.0); 
		 jobListing1.setMaximumSalary(120000.0);
		 jobListing1.setPostedBy("John Doe");
		 
		 JobListing jobListing2 = new JobListing(); 
		 jobListing2.setJobId(2); 
		 jobListing2.setJobTitle("Product Manager"); 
		 jobListing2.setEmployeeType("Full-time"); 
		 jobListing2.setLocation("San Francisco");
		 jobListing2.setCompanyName("XYZ Company"); 
		 jobListing2.setMinimumSalary(100000.0); 
		 jobListing2.setMaximumSalary(150000.0); 
		 jobListing2.setPostedBy("Jane Smith");

		 List<JobListing> expectedJobListings = Arrays.asList(jobListing1, jobListing2); 
		// Mockito.when(jobRepository.findAll()).thenReturn(expectedJobListings);

		 when(jobRepository.findAll()).thenReturn(expectedJobListings);
		 List<JobListing> actualJobListings = jobSeekerServiceImpl.getjobs();

	        // Assert 
	        assertEquals(expectedJobListings, actualJobListings);

		 // Act List<JobListing> actualJobListings = jobService.getJobs();

		 // Assert assertEquals(expectedJobListings, actualJobListings); }
	 
	 
}
	 @Test
	 public void testGetJobs_ReturnsEmptyList() {
	     // Arrange
	     when(jobRepository.findAll()).thenReturn(Collections.emptyList());

	     // Act
	     List<JobListing> actualJobListings = jobSeekerServiceImpl.getjobs();

	     // Assert
	     assertTrue(actualJobListings.isEmpty());
	 }
	 
	 @Test
	 public void testGetJobs_ThrowsRuntimeException() {
	     // Arrange
	     when(jobRepository.findAll()).thenThrow(new RuntimeException("Database error"));

	     // Act and Assert
	     assertThrows(RuntimeException.class, () -> jobSeekerServiceImpl.getjobs());
	 }
	 
}
