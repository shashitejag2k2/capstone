package com.hv.jobhunt.controllers;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.aspectj.lang.annotation.Before;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.hv.jobhunt.Models.Employeer;
import com.hv.jobhunt.Models.Subscription;
import com.hv.jobhunt.repository.EmployeerRepo;
import com.hv.jobhunt.services.AdminService;
@ExtendWith(MockitoExtension.class)
class AdminControllerTest {
	
	 	@InjectMocks
	    private AdminController adminController;

	    @Mock
	    private AdminService adminService;
	    
	    @Mock
	    private EmployeerRepo employeerRepo;
	    

	    @Test
	    public void testGetEmployes() throws Exception {
	        // Arrange
	        List<Employeer> expectedEmployees = new ArrayList<>();
	        Employeer employeer1 = new Employeer();
	        employeer1.setEmployeeId(1);
	        employeer1.setName("shashi");
	        employeer1.setEmailId("shashi@email.com");
	        employeer1.setPassword("password123");
	        employeer1.setCompanyName("Hitachi vantara");
	        employeer1.setSubscriptionType("Premium");
	        employeer1.setSubscriptionExprirationDate(new Date());
	        employeer1.setStatus("pending");

	        Employeer employeer2 = new Employeer();
	        employeer2.setEmployeeId(2);
	        employeer2.setName("Teja");
	        employeer2.setEmailId("Teja@email.com");
	        employeer2.setPassword("d456");
	        employeer2.setCompanyName("cognizant");
	        employeer2.setSubscriptionType("Basic");
	        employeer2.setSubscriptionExprirationDate(new Date());
	        employeer2.setStatus("pending");

	        expectedEmployees.add(employeer1);
	        expectedEmployees.add(employeer2);

	        when(adminService.getEmployeers()).thenReturn(expectedEmployees);

	        // Act
	        ResponseEntity<List<Employeer>> response = adminController.getEmployes();

	        // Assert
	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertIterableEquals(expectedEmployees, response.getBody());
	    }
	    
	    

	    @Test
	    public void testGetEmployes_ServiceThrowsException() throws Exception {
	        // Arrange
	        when(adminService.getEmployeers()).thenThrow(new RuntimeException("Error getting employes"));

	        // Act
	        ResponseEntity<List<Employeer>> response = adminController.getEmployes();

	        // Assert
	        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
	        assertEquals(null, response.getBody());
	    }
	    
	    @Test
	    public void testGetIndividualEmploye() throws Exception {
	        // Arrange
	        int empId = 1;
	        Employeer expectedEmployee = new Employeer();
	        expectedEmployee.setEmployeeId(empId);
	        expectedEmployee.setName("shashi");
	        expectedEmployee.setEmailId("shashi@email.com");
	        expectedEmployee.setPassword("password123");
	        expectedEmployee.setCompanyName("Hitachi vantara");
	        expectedEmployee.setSubscriptionType("Premium");
	        expectedEmployee.setSubscriptionExprirationDate(new Date());
	        expectedEmployee.setStatus("pending");

	        when(employeerRepo.findByEmployeeId(empId)).thenReturn(expectedEmployee);

	        // Act
	        ResponseEntity<Employeer> response = adminController.getIndividualEmploye(empId);

	        // Assert
	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertEquals(expectedEmployee, response.getBody());
	    }
	    
	    @Test
	    public void testGetIndividualEmploye_NotFound() throws Exception {
	        // Arrange
	        int empId = 1;
	        when(adminService.getIndividualEmployee(empId)).thenReturn(null);

	        // Act
	        ResponseEntity<Employeer> response = adminController.getIndividualEmploye(empId);

	        // Assert
	        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
	        assertEquals(null, response.getBody());
	    }
	    
	    @Test
	    public void testGetIndividualEmploye_ServiceThrowsException() throws Exception {
	    // Arrange
	        int empId = 1;
	        when(adminService.getIndividualEmployee(empId)).thenThrow(new RuntimeException("Error getting employee"));

	        // Act
	        ResponseEntity<Employeer> response = adminController.getIndividualEmploye(empId);

	        // Assert
	        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
	        assertEquals(null, response.getBody());
	    }
	    
	    @Test
	    public void testDeleteEmployeerSuccess() {
	        // Arrange
	        int empId = 1;
	        when(adminService.deleteEmployee(empId)).thenReturn("Employeer deleted successfully");

	        // Act
	        ResponseEntity<String> response = adminController.deleteEmployeer(empId);

	        // Assert
	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertEquals("Employeer Deleted Successfully", response.getBody());
	        verify(adminService, times(1)).deleteEmployee(empId);
	    }
	    
	    @Test
	    public void testGetEmployeersSuccess() {
	        // Arrange
	        String status = "Approved";
	        String email = "test@example.com";
	        when(adminService.updateStatus(status, email)).thenReturn("Employeer status updated successfully");

	        // Act
	        ResponseEntity<String> response = adminController.getEmployeers(status, email);

	        // Assert
	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertEquals("Status Updated Successfully", response.getBody());
	        verify(adminService, times(1)).updateStatus(status, email);
	    }
	    
	    @Test
	    public void testCreateSubscriptionSuccess() {
	        // Arrange
	        Subscription subscription = new Subscription();
	        subscription.setSubscriptionType("Premium");
	        subscription.setNumberOfJobs(10);
	        subscription.setDuration(30);
	        subscription.setPrice(500.0);
	        when(adminService.createSubscription(subscription)).thenReturn("Subscription created successfully");

	        // Act
	        ResponseEntity<String> response = adminController.createSubscription(subscription);

	        // Assert
	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertEquals("Subscription created successfully", response.getBody());
	        verify(adminService, times(1)).createSubscription(subscription);
	    }
	    
	    @Test
	    public void testCreateSubscriptionFailureInternalServerError() {
	        Subscription subscription = new Subscription();
	        subscription.setSubscriptionType("Premium");
	        subscription.setDuration(3);
	        subscription.setPrice(100.0);

	        when(adminService.createSubscription(subscription)).thenThrow(new RuntimeException("Internal server error"));

	        try {
	            ResponseEntity<String> response = adminController.createSubscription(subscription);
	            fail("Expected RuntimeException to be thrown");
	        } catch (RuntimeException e) {
	            assertEquals("Internal server error", e.getMessage());
	        }

	        verify(adminService, times(1)).createSubscription(subscription);
	    }
	    @Test
	    public void testUpdateSubscriptionSuccess() {
	        Subscription subscription = new Subscription();
	        subscription.setSubscriptionType("Premium");
	        subscription.setDuration(3);
	        subscription.setNumberOfJobs(5);
	        subscription.setPrice(100.0);
	        

	        when(adminService.subscriptionUpdate(subscription)).thenReturn("Saved successfully");

	        ResponseEntity<String> response = adminController.updateSubscription(subscription);

	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertEquals("Saved successfully", response.getBody());

	        verify(adminService, times(1)).subscriptionUpdate(subscription);
	    }
	    @Test
	    public void testUpdateSubscriptionFailureNotFound() {
	        Subscription subscription = new Subscription();
	        subscription.setSubscriptionType("Premium");
	        subscription.setDuration(3);
	        subscription.setNumberOfJobs(5);
	        subscription.setPrice(100.0);
	       

	        when(adminService.subscriptionUpdate(subscription)).thenReturn("Subscription not found");

	        ResponseEntity<String> response = adminController.updateSubscription(subscription);

	        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
	        assertEquals("Subscription not found", response.getBody());

	        verify(adminService, times(1)).subscriptionUpdate(subscription);
	    }
	    @Test
	    public void testUpdateSubscriptionFailureInternalServerError() {
	        Subscription subscription = new Subscription();
	        subscription.setSubscriptionType("Premium");
	        subscription.setDuration(3);
	        subscription.setNumberOfJobs(5);
	        subscription.setPrice(100.0);
	        

	        when(adminService.subscriptionUpdate(subscription)).thenThrow(new RuntimeException("Internal server error"));

	        try {
	            ResponseEntity<String> response = adminController.updateSubscription(subscription);
	            fail("Expected RuntimeException to be thrown");
	        } catch (RuntimeException e) {
	            assertEquals("An error occurred: Internal server error", e.getMessage());
	        }

	        verify(adminService, times(1)).subscriptionUpdate(subscription);
	    }
	    
	    @Test
	    public void testDeleteSubscriptionSuccess() {
	        Long subscriptionId = 1L;

	        when(adminService.deleteSubscription(subscriptionId)).thenReturn("Subscription deleted successfully");

	        ResponseEntity<String> response = adminController.DeleteSubscription(subscriptionId);

	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertEquals("Subscription deleted successfully", response.getBody());

	        verify(adminService, times(1)).deleteSubscription(subscriptionId);
	    }
	    
	    @Test
	    public void testDeleteSubscriptionFailureNotFound() {
	        Long subscriptionId = 1L;

	        when(adminService.deleteSubscription(subscriptionId)).thenReturn("Subscription not found");

	        ResponseEntity<String> response = adminController.DeleteSubscription(subscriptionId);

	        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
	        assertEquals("Subscription not found", response.getBody());

	        verify(adminService, times(1)).deleteSubscription(subscriptionId);
	    }
	   
	    
}



	


