package com.hv.jobhunt.serviceImpl;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import com.hv.jobhunt.Models.AppliedJobs;
import com.hv.jobhunt.Models.JobListing;
import com.hv.jobhunt.Models.JobSeeker;
import com.hv.jobhunt.repository.JobAppliedRepository;
import com.hv.jobhunt.repository.JobRepository;
import com.hv.jobhunt.repository.JobSeekerRepo;
@ExtendWith(MockitoExtension.class)
class JobSeekerServiceImplTest {
	
	@Mock
	private JobAppliedRepository jobAppliedRepository;
	
	@Mock
	private JobRepository jobRepository;
	
	@Mock
	private JobSeekerRepo jobSeekerRepo;
	
	@InjectMocks
    private JobSeekerServiceImpl jobSeekerServiceImpl;
	
	 @Test
	    public void register_Success() {
	        // Arrange
	        JobSeeker jobSeeker = new JobSeeker();
	        // Set jobSeeker properties as needed for a successful registration

	        Mockito.doNothing().when(jobSeekerRepo).save(jobSeeker);

	        // Act
	        String result = jobSeekerServiceImpl.register(jobSeeker);

	        // Assert
	        assertEquals("Successfully saved JobSeeker", result);
	    }

	@Test
    void testApplyJob_Success() {
        // Test case for successful job application

        // Mock input data
        AppliedJobs jobApplication = new AppliedJobs();
        jobApplication.setAppliedBy("user@example.com");
        jobApplication.setJobId(123);

        // Mock repository behavior
        when(jobAppliedRepository.findByAppliedByAndJobId("user@example.com", 123)).thenReturn(null);

        // Calling the service method
        String result = jobSeekerServiceImpl.applyJob(jobApplication);

        // Assertions
        assertEquals("Job application saved successfully", result);

        // Verify interactions
        verify(jobAppliedRepository, times(1)).save(jobApplication);
    }
	
	@Test
    void testApplyJob_AlreadyApplied() {
        // Test case for when the user has already applied for the job

        // Mock input data
        AppliedJobs jobApplication = new AppliedJobs();
        jobApplication.setAppliedBy("user@example.com");
        jobApplication.setJobId(123);
        jobApplication.setPostedBy("employer@example.com");
        jobApplication.setJobTitle("Software Developer");
        jobApplication.setStatus("pending");

        // Mock repository behavior
        when(jobAppliedRepository.findByAppliedByAndJobId("user@example.com", 123)).thenReturn(jobApplication);

        // Calling the service method
        String result = jobSeekerServiceImpl.applyJob(jobApplication);

        // Assertions
        assertEquals("You have already applied for this job", result);

        // Verify interactions
        verify(jobAppliedRepository, never()).save(any());
    }
	
	 @Test
	    void testApplyJob_Exception() {
	        // Test case for when an unexpected error occurs during job application

	        // Mock input data
	        AppliedJobs jobApplication = new AppliedJobs();
	        jobApplication.setAppliedBy("user@example.com");
	        jobApplication.setJobId(123);
	        jobApplication.setPostedBy("employer@example.com");
	        jobApplication.setJobTitle("Software Developer");
	        jobApplication.setStatus("pending");

	        // Mock repository behavior to simulate an exception
	        when(jobAppliedRepository.findByAppliedByAndJobId("user@example.com", 123)).thenThrow(new RuntimeException("Test exception"));

	        // Calling the service method
	        String result = jobSeekerServiceImpl.applyJob(jobApplication);

	        // Assertions
	        assertEquals("Failed to save job application due to an unexpected error", result);

	        // Verify interactions
	        verify(jobAppliedRepository, never()).save(any());
	    }
	 
	 @Test 
	 public void testGetJobs_ReturnsNonEmptyList() 
	 {
		 
		 JobListing jobListing1 = new JobListing(); 
		 jobListing1.setJobId(1); 
		 jobListing1.setJobTitle("Software Engineer");
		 jobListing1.setEmployeeType("Full-time"); 
		 jobListing1.setLocation("New York"); 
		 jobListing1.setCompanyName("ABC Company"); 
		 jobListing1.setMinimumSalary(80000.0); 
		 jobListing1.setMaximumSalary(120000.0);
		 jobListing1.setPostedBy("John Doe");
		 
		 JobListing jobListing2 = new JobListing(); 
		 jobListing2.setJobId(2); 
		 jobListing2.setJobTitle("Product Manager"); 
		 jobListing2.setEmployeeType("Full-time"); 
		 jobListing2.setLocation("San Francisco");
		 jobListing2.setCompanyName("XYZ Company"); 
		 jobListing2.setMinimumSalary(100000.0); 
		 jobListing2.setMaximumSalary(150000.0); 
		 jobListing2.setPostedBy("Jane Smith");

		 List<JobListing> expectedJobListings = Arrays.asList(jobListing1, jobListing2); 
		// Mockito.when(jobRepository.findAll()).thenReturn(expectedJobListings);

		 when(jobRepository.findAll()).thenReturn(expectedJobListings);
		 List<JobListing> actualJobListings = jobSeekerServiceImpl.getjobs();

	        // Assert 
	        assertEquals(expectedJobListings, actualJobListings);

		 // Act List<JobListing> actualJobListings = jobService.getJobs();

		 // Assert assertEquals(expectedJobListings, actualJobListings); }
	 
	 
}
	 @Test
	 public void testGetJobs_ReturnsEmptyList() {
	     // Arrange
	     when(jobRepository.findAll()).thenReturn(Collections.emptyList());

	     // Act
	     List<JobListing> actualJobListings = jobSeekerServiceImpl.getjobs();

	     // Assert
	     assertTrue(actualJobListings.isEmpty());
	 }
	 
	 @Test
	 public void testGetJobs_ThrowsRuntimeException() {
	     // Arrange
	     when(jobRepository.findAll()).thenThrow(new RuntimeException("Database error"));

	     // Act and Assert
	     assertThrows(RuntimeException.class, () -> jobSeekerServiceImpl.getjobs());
	 }
	 
	 @Test
	 public void testUpdateProfile_JobSeekerIdExists_ProfileUpdated_ReturnsSuccessMessage() {
	     // Arrange
		 // Arrange
	        int jobSeekerId = 1;
	        JobSeeker jobSeeker = new JobSeeker();
	        jobSeeker.setJobSeekerId(jobSeekerId);
	        jobSeeker.setName("John Doe");
	        jobSeeker.setEmailId("john.doe@example.com"); // Update to emailId
	        jobSeeker.setPassword("password"); // Added
	        jobSeeker.setCollegeName("ABC University"); // Added
	        jobSeeker.setExperience("3 years"); // Added
	        jobSeeker.setSkills("Java, Python, SQL");
	        
	        
	        when(jobSeekerRepo.findByJobSeekerId(jobSeekerId)).thenReturn(jobSeeker);

	        // Act
	        String result = jobSeekerServiceImpl.updateProfile(jobSeeker);

	        // Assert
	        assertEquals("Profile Updated successfully", result);
	        verify(jobSeekerRepo).save(jobSeeker);
	    }
	 
	 @Test
	 public void testUpdateProfile_JobSeekerIdDoesNotExist_ReturnsFailureMessage() {
	     // Arrange
	     int jobSeekerId = 999;
	     	JobSeeker jobSeeker = new JobSeeker();
	        jobSeeker.setJobSeekerId(jobSeekerId);
	        jobSeeker.setName("John Doe");
	        jobSeeker.setEmailId("john.doe@example.com"); // Update to emailId
	        jobSeeker.setPassword("password"); // Added
	        jobSeeker.setCollegeName("ABC University"); // Added
	        jobSeeker.setExperience("3 years"); // Added
	        jobSeeker.setSkills("Java, Python, SQL");
	     when(jobSeekerRepo.findByJobSeekerId(jobSeekerId)).thenReturn(null);

	     // Act
	     String result = jobSeekerServiceImpl.updateProfile(jobSeeker);

	     // Assert
	     assertEquals("Not saved", result);
	 }
	 @Test
	 public void testUpdateProfile_DatabaseError_ThrowsRuntimeException() {
	     // Arrange
	     int jobSeekerId = 1;
	     JobSeeker jobSeeker = new JobSeeker();
	        jobSeeker.setJobSeekerId(jobSeekerId);
	        jobSeeker.setName("John Doe");
	        jobSeeker.setEmailId("john.doe@example.com"); // Update to emailId
	        jobSeeker.setPassword("password"); // Added
	        jobSeeker.setCollegeName("ABC University"); // Added
	        jobSeeker.setExperience("3 years"); // Added
	        jobSeeker.setSkills("Java, Python, SQL");
	     when(jobSeekerRepo.findByJobSeekerId(jobSeekerId)).thenReturn(jobSeeker);
	     doThrow(new RuntimeException("Database error")).when(jobSeekerRepo).save(jobSeeker);

	     // Act and Assert
	     assertThrows(RuntimeException.class, () -> jobSeekerServiceImpl.updateProfile(jobSeeker));
	 }
	 
	 @Test
	 public void testGetJobAppliedDetails_UserHasApplications_ReturnsNonEmptyList() {
	     // Arrange
	     String appliedBy = "john.doe@example.com";
	     
	     AppliedJobs appliedJob1 = new AppliedJobs();
	       
	        appliedJob1.setJobId(1);
	        appliedJob1.setJobTitle("Software Engineer");
	        appliedJob1.setPostedBy("ABC Company");
	        appliedJob1.setStatus("Pending");
	        appliedJob1.setAppliedBy(appliedBy);
	        
	     AppliedJobs appliedJob2 = new AppliedJobs();
	       
	        appliedJob2.setJobId(2);
	        appliedJob2.setJobTitle("Product Manager");
	        appliedJob2.setPostedBy("XYZ Company");
	        appliedJob2.setStatus("Rejected");
	        appliedJob2.setAppliedBy(appliedBy);
	       List <AppliedJobs> expectedApplications = Arrays.asList(appliedJob1,appliedJob2);
	        
	        
	     when(jobAppliedRepository.findByAppliedBy(appliedBy)).thenReturn(expectedApplications);

	     // Act
	     List<AppliedJobs> actualApplications = jobSeekerServiceImpl.getJobAppliedDetails(appliedBy);

	     // Assert
	     assertEquals(expectedApplications, actualApplications);
	 }
	 
	 @Test
	 public void testGetJobAppliedDetails_UserHasNoApplications_ReturnsEmptyList() {
	     // Arrange
	     String appliedBy = "jane.doe@example.com";
	     when(jobAppliedRepository.findByAppliedBy(appliedBy)).thenReturn(Collections.emptyList());

	     // Act
	     List<AppliedJobs> actualApplications = jobSeekerServiceImpl.getJobAppliedDetails(appliedBy);

	     // Assert
	     assertTrue(actualApplications.isEmpty());
	 }
	 @Test
	 public void testGetJobAppliedDetails_DatabaseError_ThrowsRuntimeException() {
	     // Arrange
	     String appliedBy = "john.doe@example.com";
	     when(jobAppliedRepository.findByAppliedBy(appliedBy)).thenThrow(new RuntimeException("Database error"));

	     // Act and Assert
	     assertThrows(RuntimeException.class, () -> jobSeekerServiceImpl.getJobAppliedDetails(appliedBy));
	 }
	 
	 @Test
	 public void testSearchJobListings_KeywordMatchesJobTitle_ReturnsNonEmptyList() {
	     // Arrange
	     String keyword = "Software Engineer";
	     JobListing jobListing1 = new JobListing();
	        jobListing1.setJobId(1);
	        jobListing1.setJobTitle("Software Engineer");
	        jobListing1.setEmployeeType("Full-time");
	        jobListing1.setLocation("New York");
	        jobListing1.setCompanyName("ABC Company");
	        jobListing1.setMinimumSalary(80000.0);
	        jobListing1.setMaximumSalary(120000.0);
	        jobListing1.setPostedBy("John Doe");

	        JobListing jobListing2 = new JobListing();
	        jobListing2.setJobId(2);
	        jobListing2.setJobTitle("Software Engineer Intern");
	        jobListing2.setEmployeeType("Part-time");
	        jobListing2.setLocation("San Francisco");
	        jobListing2.setCompanyName("XYZ Company");
	        jobListing2.setMinimumSalary(50000.0);
	        jobListing2.setMaximumSalary(60000.0);
	        jobListing2.setPostedBy("Jane Smith");
	        List<JobListing> expectedJobListings = Arrays.asList(jobListing1,jobListing2);
	     when(jobRepository.findByJobTitleContainingIgnoreCase(keyword)).thenReturn(expectedJobListings);

	     // Act
	     List<JobListing> actualJobListings = jobSeekerServiceImpl.searchJobListings(keyword);

	     // Assert
	     assertEquals(expectedJobListings, actualJobListings);
	 }
	 
	 @Test
	 public void testSearchJobListings_KeywordDoesNotMatchAnyJobTitle_ReturnsEmptyList() {
	     // Arrange
	     String keyword = "Marketing";
	     when(jobRepository.findByJobTitleContainingIgnoreCase(keyword)).thenReturn(Collections.emptyList());

	     // Act
	     List<JobListing> actualJobListings = jobSeekerServiceImpl.searchJobListings(keyword);

	     // Assert
	     assertTrue(actualJobListings.isEmpty());
	 }
	 
	 @Test
	 public void testSearchJobListings_DatabaseError_ThrowsRuntimeException() {
	     // Arrange
	     String keyword = "Software Engineer";
	     when(jobRepository.findByJobTitleContainingIgnoreCase(keyword)).thenThrow(new RuntimeException("Database error"));

	     // Act and Assert
	     assertThrows(RuntimeException.class, () -> jobSeekerServiceImpl.searchJobListings(keyword));
	 }
	 
	 @Test
	 public void testGetJobSeekerDetails_EmailIdExists_ReturnsJobSeeker() {
	     // Arrange
		 String email = "john.doe@example.com";
	        
	        JobSeeker expectedJobSeeker = new JobSeeker();
	        expectedJobSeeker.setJobSeekerId(123);
	        expectedJobSeeker.setName("John Doe");
	        expectedJobSeeker.setEmailId(email); // Update to emailId
	        expectedJobSeeker.setPassword("password"); // Added
	        expectedJobSeeker.setCollegeName("ABC University"); // Added
	        expectedJobSeeker.setExperience("3 years"); // Added
	        expectedJobSeeker.setSkills("Java, Python, SQL");
	     when(jobSeekerRepo.findByEmailId(email)).thenReturn(expectedJobSeeker);

	     // Act
	     JobSeeker actualJobSeeker = jobSeekerServiceImpl.getJobSeekerDetails(email);

	     // Assert
	     assertEquals(expectedJobSeeker, actualJobSeeker);
	 }
	 
	 @Test
	 public void testGetJobSeekerDetails_EmailIdDoesNotExist_ReturnsNull() {
	     // Arrange
	     String email = "nonexistent@example.com";
	     when(jobSeekerRepo.findByEmailId(email)).thenReturn(null);

	     // Act
	     JobSeeker actualJobSeeker = jobSeekerServiceImpl.getJobSeekerDetails(email);

	     // Assert
	     assertNull(actualJobSeeker);
	 }
	 
	 
}
