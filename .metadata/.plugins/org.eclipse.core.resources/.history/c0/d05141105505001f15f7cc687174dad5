package com.hv.jobhunt.controllers;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.javamail.JavaMailSender;
//import org.springframework.web.ErrorResponse;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.hv.jobhunt.Models.AppliedJobs;
import com.hv.jobhunt.Models.EmailRequest;
import com.hv.jobhunt.Models.Employeer;
import com.hv.jobhunt.Models.JobListing;
import com.hv.jobhunt.Models.JobSeeker;
import com.hv.jobhunt.Models.Subscription;
import com.hv.jobhunt.repository.EmployeerRepo;
import com.hv.jobhunt.repository.JobAppliedRepository;
import com.hv.jobhunt.repository.JobRepository;
import com.hv.jobhunt.services.EmployeerService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

@CrossOrigin(origins = "http://localhost:3000")
@RestController
@Api(tags="Admin Authentication")
public class EmployeerController {
	
	 	@Autowired
	    private JobRepository jobRepository;
	    @Autowired
	    private JobAppliedRepository appliedRepo;
	    
	    @Autowired
	    private EmployeerRepo employerRepo;
	    
	    @Autowired
	    private EmployeerService employerService;
	    
	    @Autowired
	    private JavaMailSender javaMailSender;
	    
	   public void setEmployerService(EmployeerService employerService) {
			this.employerService = employerService;
		}

	@PostMapping("/employeerRegister")
	    public ResponseEntity<String> register(@RequestBody Employeer employeer) {
	        try {
	        	String employeRegisterResult=employerService.register(employeer);
	            return new ResponseEntity<>(employeRegisterResult, HttpStatus.CREATED);
	        } catch (Exception e) {
	            return new ResponseEntity<>("Failed to add Employeer: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	        }
	    }
	 
	 @PostMapping("/employeerLogin")
	 @ApiOperation(value="Authenticate admin user",notes="authenticate admin user withprovided credentials")
	 public ResponseEntity<Employeer> login(@RequestBody Employeer employeer) {
		 try {
		        Employeer loginResult = employerService.login(employeer.getEmailId(), employeer.getPassword());
		        
		        if (loginResult != null) {
		            return ResponseEntity.ok().body(loginResult);
		        } else {
		            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
		        }
		    } catch (RuntimeException e) {
		        if ("Invalid email or password".equals(e.getMessage())) {
		        	Employeer emp = new Employeer();
		        	emp.setName("Invalid email or password");
		            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
		        } else {
		            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
		        }
		    }
		}
	 
	 
	 @PostMapping("/postjob")//byEmployeer
	    public ResponseEntity<String> addJob(@RequestBody JobListing job) {
	        try {
	        	employerService.postJob(job);
	            return new ResponseEntity<>("Job added successfully", HttpStatus.CREATED);
	        } catch (Exception e) {
	            return new ResponseEntity<>("Failed to add job: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	        }
	    }
	 
	 @GetMapping("/getalljobs")//to fetch all jobs created by employeer
	    public ResponseEntity<List<JobListing>> getAppliedData(@RequestParam("postedBy") String postedBy ) {
		 try {
		        System.out.println("This is email " + postedBy);
		        List<JobListing> getJobs = employerService.getjobs(postedBy);
		        return new ResponseEntity<>(getJobs, HttpStatus.OK);
		        
		    }
		 		catch (Exception e) {
		        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
		                             .body(Collections.emptyList());
		    }
		 
		 
					             
	    }
	 
	 @GetMapping("/getjobSeekers")//gets the jobseekers who applied for employeer's posted jobs
	    public ResponseEntity<Iterable<AppliedJobs>> getAppliedData(@RequestBody AppliedJobs jobApplication) {
		 try {
		        String postedBy = jobApplication.getPostedBy();
		        Iterable<AppliedJobs> jobSeekers = employerService.getjobSeekers(postedBy);
		        return ResponseEntity.ok().body(jobSeekers);
		    } catch (RuntimeException e) {
		        // Log the exception or handle it as needed
		        e.printStackTrace(); // for logging purposes
		        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
		                             .body(null); // Or any appropriate response
		    }
					             
	    }
	 
	 @PostMapping("/updateStatus")//To place Reviewing
	    public ResponseEntity<String> updateStatus(@RequestBody AppliedJobs jobApplication) {
	        try {
	        	String existingJobApplications = employerService.updateStatus(jobApplication);
	        	return new ResponseEntity<>(existingJobApplications, HttpStatus.CREATED);

	        } catch (Exception e) {
	            return new ResponseEntity<>("Failed to updated: ", HttpStatus.INTERNAL_SERVER_ERROR);
	        }
	    }
	 
	 @PostMapping("/deleteJob")//To place Reviewing
	    public ResponseEntity<String> deleteJob(@RequestParam("jobId") int jobId) {
		 try {
		        System.out.println("This is job id " + jobId);
		        employerService.deleteJob(jobId);
		        return new ResponseEntity<>("Successfully Deleted Job", HttpStatus.CREATED);
		    } catch (Exception e) {
		        return new ResponseEntity<>("Failed to Delete: " + e.getMessage(), HttpStatus.OK);
		    }
	    }
	 
	 @PutMapping("/updateJob")
	 public ResponseEntity<String> updateJob(@RequestBody JobListing jobListing){

	        try {
	        	employerService.updateJob(jobListing);
	        	return new ResponseEntity<>("Successfully Updated Job", HttpStatus.CREATED);

	        } catch (Exception e) {
	            return new ResponseEntity<>("Failed to Update: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
	        }
	    
		 
	 }
	 
	 @PutMapping("/updateJobApplicationStatus")//if job application status is open then method will set status as close
	 public ResponseEntity<String> updateJobApplicationStatus(@RequestParam("jobId") int jobId){

		 try {
		        employerService.updateJobApplicationStatus(jobId);
		        return new ResponseEntity<>("Successfully Updated", HttpStatus.CREATED);
		    } catch (NoSuchElementException e) {
		        return new ResponseEntity<>("Job not found with ID: " + jobId, HttpStatus.NOT_FOUND);
		    } catch (Exception e) {
		        return new ResponseEntity<>("Failed to Update: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		    }
	    
		 
	 }
	 
	 @PutMapping("/updateEmployerSubscription")
	 public ResponseEntity<String> updateEmployerSubscription(@RequestBody Employeer employee){

		 try {
			 System.out.println("from controller");
		        employerService.updateemployerSubscription(employee);
		        return new ResponseEntity<>("Successfully Updated Job", HttpStatus.CREATED);
		    } catch (NoSuchElementException e) {
		        return new ResponseEntity<>("Employeer not found with ID: " + employee.getName(), HttpStatus.NOT_FOUND);
		    } catch (Exception e) {
		        return new ResponseEntity<>("Failed to Update: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		    }
	    
		 
	 }
	 
	 @GetMapping("/getRemainingJobCount")
	 public ResponseEntity<String> remainingJobCount(@RequestParam("subscriptionType") String subscriptionType){

		 try {
			 System.out.println("from controller");
		       String remainingCount = employerService.remainingJobCount(subscriptionType);
		        return new ResponseEntity<>(remainingCount, HttpStatus.CREATED);
		    } catch (NoSuchElementException e) {
		        return new ResponseEntity<>("Subscription not found ", HttpStatus.NOT_FOUND);
		    } catch (Exception e) {
		        return new ResponseEntity<>("Failed to Fetch Remaining Count: ", HttpStatus.INTERNAL_SERVER_ERROR);
		    }
	    
		 
	 }
	 
	 @GetMapping("/getSeekersByJob")
	 public ResponseEntity<List<JobSeeker>> getSeekersByJob(@RequestParam("jobId") int jobId, @RequestParam("employeerMail") String employeerMail){
		 System.out.println(jobId);
		 System.out.println(employeerMail);
		 try {
		        List<JobSeeker> jobSeekers = employerService.getDatails(jobId, employeerMail);
		        return ResponseEntity.ok().body(jobSeekers);
		    } catch (IllegalArgumentException e) {
		        return ResponseEntity.badRequest().build();
		    } catch (Exception e) {
		        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		    }
}
	 
	 @GetMapping("/getApplicationCount")
	 	public ResponseEntity<Map<String, String>> getApplicationCount(@RequestParam("employeerMail")String employeerMail){
		 try {
		        Map<String, String> countMap = employerService.getCount(employeerMail);
		        return ResponseEntity.ok().body(countMap);
		    } catch (IllegalArgumentException e) {
		        return ResponseEntity.badRequest().build();
		    } catch (Exception e) {
		        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		    }
	 }
	 
	 @GetMapping("/getSubscription")
	 	public ResponseEntity<String> getSubscription(@RequestParam("employeerMail")String employeerMail){
		 try {
		        String subscription = employerService.getSubscriptionType(employeerMail);
		        return ResponseEntity.ok().body(subscription);
		    } catch (IllegalArgumentException e) {
		        return ResponseEntity.badRequest().build();
		    } catch (NoSuchElementException e) {
		        return ResponseEntity.notFound().build();
		    } catch (Exception e) {
		        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
		    }
	 }
	 
	 
	 

	 
	 @PostMapping("/Mail")
	 public ResponseEntity<String> sendEmail(
			 @RequestParam("employeerEmailId") String employeerEmailId,
			 @RequestParam("jobseekerMailId") String jobseekerMailId,
			 @RequestParam("username")String username,
	 		 @RequestParam("status")String status,
	 		@RequestParam("jobId")int jobId){
		 try {
		System.out.print("emp "+employeerEmailId);
		System.out.print(jobseekerMailId);
		System.out.print(username);
		System.out.print(status);
		 employerService.sendmail(employeerEmailId, jobseekerMailId,username,status,jobId);
		 return ResponseEntity.ok("Email sent successfully");
		 }
		  catch (Exception e) {
			           return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to send email: " + e.getMessage());
			        }
		 
	 }
	 
	 
	
	 
	 
	 
	 

}
