package com.hv.jobhunt.controllers;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.hv.jobhunt.Models.AppliedJobs;
import com.hv.jobhunt.Models.JobListing;
import com.hv.jobhunt.Models.JobSeeker;
import com.hv.jobhunt.services.JobSeekerService;
import org.mockito.junit.MockitoJUnitRunner;
@ExtendWith(MockitoExtension.class)
class JobSeekerControllerTest {

	  	@Mock
	    private JobSeekerService jobSeekerService;

	    @InjectMocks
	    private JobSeekerController JobSeekerController;

	   

	    @Test
	    public void testApplyJob_Success() {
	        // Mocking
	        AppliedJobs jobApplication = new AppliedJobs();
	        jobApplication.setAppliedBy("user@example.com");
	        jobApplication.setJobId(123);

	        when(jobSeekerService.applyJob(any(AppliedJobs.class))).thenReturn("Job application saved successfully");

	        // Execution
	        ResponseEntity<String> responseEntity = JobSeekerController.applyJob(jobApplication);

	        // Assertion
	        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());
	        assertEquals("Job application saved successfully", responseEntity.getBody());
	    }

	    @Test
	    public void testApplyJob_Failure() {
	        // Mocking
	        AppliedJobs jobApplication = new AppliedJobs();
	        jobApplication.setAppliedBy("user@example.com");
	        jobApplication.setJobId(123);

	        when(jobSeekerService.applyJob(any(AppliedJobs.class))).thenReturn("Failed to save job application: Some error occurred");

	        // Execution
	        ResponseEntity<String> responseEntity = JobSeekerController.applyJob(jobApplication);
	        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());
	        assertEquals("Failed to save job application: Some error occurred", responseEntity.getBody());
	    }
	    
	    @Test
	    public void testUpdateProfileSuccess() {
	        
	        JobSeeker jobSeeker = new JobSeeker(/* constructor parameters */);
	        when(jobSeekerService.updateProfile(jobSeeker)).thenReturn("Profile Updated successfully");

	        
	        ResponseEntity<String> responseEntity = JobSeekerController.updateProfile(jobSeeker);

	        // Verify the response status code
	        assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());

	        // Verify the response body contains the success message
	        assertEquals("Profile Updated successfully", responseEntity.getBody());
	    }
	    
	    @Test
	    public void testUpdateProfileFailure() {
	        // Mock jobSeeker object
	        JobSeeker jobSeeker = new JobSeeker(/* constructor parameters */);

	        // Mock the behavior of jobSeekerService.updateProfile() to throw an exception
	        when(jobSeekerService.updateProfile(jobSeeker)).thenThrow(new RuntimeException("Error updating profile"));

	        // Call the controller method
	        ResponseEntity<String> responseEntity = JobSeekerController.updateProfile(jobSeeker);

	        // Verify the response status code
	        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntity.getStatusCode());

	        // Verify the response body contains the error message
	        assertEquals("Failed to Update Profile: Error updating profile", responseEntity.getBody());
	    }
	    
	    @Test
	    public void testUpdateProfileJobSeekerNotFound() {
	        // Mock jobSeeker object
	        JobSeeker jobSeeker = new JobSeeker(/* constructor parameters */);

	        // Mock the behavior of jobSeekerService.updateProfile() to return job seeker not found message
	        when(jobSeekerService.updateProfile(jobSeeker)).thenReturn("Job seeker with ID " + jobSeeker.getJobSeekerId() + " not found");

	        // Call the controller method
	        ResponseEntity<String> responseEntity = JobSeekerController.updateProfile(jobSeeker);

	        // Verify the response status code
	        assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());

	        // Verify the response body contains the job seeker not found message
	        assertEquals("Job seeker with ID " + jobSeeker.getJobSeekerId() + " not found", responseEntity.getBody());
	    }
	    
	    @Test
	    public void testSearchJobListings_HappyPath() throws Exception {
	        // Arrange
	        String keyword = "java developer";
	        List<JobListing> expectedResults = new ArrayList<>();
	        JobListing jobListing1 = new JobListing();
	        jobListing1.setJobId(1);
	        jobListing1.setJobTitle("Java Developer");
	        jobListing1.setJobPositioning("Full-time");
	        jobListing1.setEmployeeType("Permanent");
	        jobListing1.setJobDescription("Java developer job description");
	        jobListing1.setKeySkills("Java, Spring, Hibernate");
	        jobListing1.setMinimumWorkExperience(2);
	        jobListing1.setMaximumWorkExperience(5);
	        jobListing1.setLocation("New York");
	        jobListing1.setJobMode("On-site");
	        jobListing1.setEducationalQualification("Bachelor's degree");
	        jobListing1.setCompanyName("ABC Corporation");
	        jobListing1.setMinimumSalary(80000);
	        jobListing1.setMaximumSalary(120000);
	        jobListing1.setPostedBy("John Doe");
	        jobListing1.setJobApplicationStatus("Open");

	        JobListing jobListing2 = new JobListing();
	        jobListing2.setJobId(2);
	        jobListing2.setJobTitle("Senior Java Developer");
	        jobListing2.setJobPositioning("Full-time");
	        jobListing2.setEmployeeType("Permanent");
	        jobListing2.setJobDescription("Senior Java developer job description");
	        jobListing2.setKeySkills("Java, Spring, Hibernate, Cloud");
	        jobListing2.setMinimumWorkExperience(5);
	        jobListing2.setMaximumWorkExperience(10);
	        jobListing2.setLocation("San Francisco");
	        jobListing2.setJobMode("Remote");
	        jobListing2.setEducationalQualification("Master's degree");
	        jobListing2.setCompanyName("XYZ Corporation");
	        jobListing2.setMinimumSalary(120000);
	        jobListing2.setMaximumSalary(180000);
	        jobListing2.setPostedBy("Jane Doe");
	        jobListing2.setJobApplicationStatus("Open");

	        expectedResults.add(jobListing1);
	        expectedResults.add(jobListing2);

	        when(jobSeekerService.searchJobListings(keyword)).thenReturn(expectedResults);

	        // Act
	        ResponseEntity<List<JobListing>> response = JobSeekerController.searchJobListings(keyword);

	        // Assert
	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertEquals(expectedResults, response.getBody());
	    }
	    
	    @Test
	    public void testSearchJobListings_ServiceThrowsException() throws Exception {
	        // Arrange
	        String keyword = "java developer";
	        when(jobSeekerService.searchJobListings(keyword)).thenThrow(new RuntimeException("Error searching for job listings"));

	        // Act
	        ResponseEntity<List<JobListing>> response = JobSeekerController.searchJobListings(keyword);

	        // Assert
	        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
	        assertEquals(null, response.getBody());
	    }
	    
	    @Test
	    public void testSearchJobListings_NoResults() throws Exception {
	        // Arrange
	        String keyword = "java developer";
	        List<JobListing> expectedResults = new ArrayList<>();

	        when(jobSeekerService.searchJobListings(keyword)).thenReturn(expectedResults);

	        // Act
	        ResponseEntity<List<JobListing>> response = JobSeekerController.searchJobListings(keyword);

	        // Assert
	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertEquals(expectedResults, response.getBody());
	    }
	    @Test
	    public void testGetProfile_HappyPath() throws Exception {
	        // Arrange
	        String email = "shashi@email.com";
	        JobSeeker expectedProfile = new JobSeeker();
	        expectedProfile.setJobSeekerId(1);
	        expectedProfile.setName("shashi");
	        expectedProfile.setEmailId(email);
	        expectedProfile.setPassword("password123");
	        expectedProfile.setCollegeName("CMR");
	        expectedProfile.setExperience("2 years");
	        expectedProfile.setSkills("Java, Spring, Hibernate");

	        when(jobSeekerService.getJobSeekerDetails(email)).thenReturn(expectedProfile);

	        // Act
	        ResponseEntity<JobSeeker> response = JobSeekerController.getProfile(email);

	        // Assert
	        assertEquals(HttpStatus.OK, response.getStatusCode());
	        assertNotNull(response.getBody());
	        assertEquals(expectedProfile, response.getBody());
	    }
	    @Test
	    public void testGetProfile_NotFound() throws Exception {
	        // Arrange
	        String email = "shashi.@email.com";
	        when(jobSeekerService.getJobSeekerDetails(email)).thenReturn(null);

	        // Act
	        ResponseEntity<JobSeeker> response = JobSeekerController.getProfile(email);

	        // Assert
	        assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
	        assertNotNull(response.getBody());
	        assertEquals(null, response.getBody());
	    }


	    
	    


}
